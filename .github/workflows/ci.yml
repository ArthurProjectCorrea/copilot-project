name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  validate:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Disable postinstall in CI
        run: |
          # Backup original package.json
          cp package.json package.json.backup
          # Remove postinstall script to prevent npm errors in CI
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            delete pkg.scripts.postinstall;
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore package.json
        run: |
          mv package.json.backup package.json

      - name: Run lint
        run: pnpm lint

      - name: Run type check
        run: pnpm check-types

      - name: Run build
        run: pnpm build

      - name: Run tests (if available)
        run: pnpm test --passWithNoTests
